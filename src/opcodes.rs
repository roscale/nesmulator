use crate::opcodes::AddressingMode::{Absolute, AbsoluteIndexedX, AbsoluteIndexedY, Immediate, Implicit, IndexedIndirect, IndirectIndexed, ZeroPage, ZeroPageIndexedX};
use crate::opcodes::Instruction::{ADC, NOP, STA};

pub const OPCODES: [(Instruction, AddressingMode, u8); 256] = [
    // 00
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // 10
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // 20
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // 30
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // 40
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // 50
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // 60
    (NOP, Implicit, 1), (ADC, IndexedIndirect, 6), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (ADC, ZeroPage, 3), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (ADC, Immediate, 2), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (ADC, Absolute, 4), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // 70
    (NOP, Implicit, 1), (ADC, IndirectIndexed, 5), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (ADC, ZeroPageIndexedX, 4), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (ADC, AbsoluteIndexedY, 4), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (ADC, AbsoluteIndexedX, 4), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // 80
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (STA, ZeroPage, 3), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // 90
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // A0
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // B0
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // C0
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // D0
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // E0
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    // F0
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
    (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1), (NOP, Implicit, 1),
];

#[derive(Copy, Clone)]
#[allow(dead_code)]
pub enum Instruction {
    ADC,
    AND,
    ASL,
    BCC,
    BCS,
    BEQ,
    BIT,
    BMI,
    BNE,
    BPL,
    BRK,
    BVC,
    BVS,
    CLC,
    CLD,
    CLI,
    CLV,
    CMP,
    CPX,
    CPY,
    DEC,
    DEX,
    DEY,
    EOR,
    INC,
    INX,
    INY,
    JMP,
    JSR,
    LDA,
    LDX,
    LDY,
    LSR,
    NOP,
    ORA,
    PHA,
    PHP,
    PLA,
    PLP,
    ROL,
    ROR,
    RTI,
    RTS,
    SBC,
    SEC,
    SED,
    SEI,
    STA,
    STX,
    STY,
    TAX,
    TAY,
    TSX,
    TXA,
    TXS,
    TYA,
}

#[derive(Copy, Clone)]
#[allow(dead_code)]
pub enum AddressingMode {
    Implicit,
    Accumulator,
    Immediate,
    ZeroPage,
    ZeroPageIndexedX,
    ZeroPageIndexedY,
    Relative,
    Absolute,
    AbsoluteIndexedX,
    AbsoluteIndexedY,
    Indirect,
    IndexedIndirect,
    IndirectIndexed,
}
